// This is your Prisma schema file
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User and Authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          UserRole
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  contracts     Contract[]
  assignments   Assignment[]
}

enum UserRole {
  ADMIN
  MANAGER
  FIELD_WORKER
  CUSTOMER
}

// Contracts and Services
model Contract {
  id          String    @id @default(cuid())
  customerId  String
  customer    User      @relation(fields: [customerId], references: [id])
  status      ContractStatus
  startDate   DateTime
  endDate     DateTime?
  services    Service[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum ContractStatus {
  DRAFT
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

model Service {
  id          String    @id @default(cuid())
  contractId  String
  contract    Contract  @relation(fields: [contractId], references: [id])
  type        ServiceType
  frequency   ServiceFrequency
  price       Float
  schedules   Schedule[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum ServiceType {
  LAWN_MOWING
  GARDENING
  TREE_TRIMMING
  LANDSCAPING
  SNOW_REMOVAL
}

enum ServiceFrequency {
  ONE_TIME
  WEEKLY
  BI_WEEKLY
  MONTHLY
  QUARTERLY
}

// Scheduling and Resources
model Schedule {
  id          String    @id @default(cuid())
  serviceId   String
  service     Service   @relation(fields: [serviceId], references: [id])
  date        DateTime
  status      ScheduleStatus
  notes       String?
  assignments Assignment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum ScheduleStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Assignment {
  id          String    @id @default(cuid())
  scheduleId  String
  schedule    Schedule  @relation(fields: [scheduleId], references: [id])
  workerId    String
  worker      User      @relation(fields: [workerId], references: [id])
  status      AssignmentStatus
  startTime   DateTime?
  endTime     DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum AssignmentStatus {
  ASSIGNED
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  REJECTED
}
