// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User and Authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          UserRole
  phone         String?
  address       Address?
  company       String?   // For business customers
  notes         String?
  preferences   String?   // JSON string for notifications, communication preferences
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  contracts     Contract[]
  assignments   Assignment[]
  equipmentAssignments EquipmentAssignment[]

  @@index([role])
  @@index([email])
  @@index([active])
  @@index([createdAt])
}

enum UserRole {
  ADMIN
  MANAGER
  FIELD_WORKER
  CUSTOMER
}

// Contracts and Services
model Contract {
  id          String    @id @default(cuid())
  customerId  String
  customer    User      @relation(fields: [customerId], references: [id])
  status      ContractStatus
  startDate   DateTime
  endDate     DateTime?
  totalValue  Float
  services    Service[]
  invoices    Invoice[]
  terms       String?
  notes       String?
  documents   String?   // JSON string for document references/metadata
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([customerId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
}

enum ContractStatus {
  DRAFT
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

model Service {
  id          String    @id @default(cuid())
  contractId  String
  contract    Contract  @relation(fields: [contractId], references: [id])
  type        ServiceType
  frequency   ServiceFrequency
  price       Float
  description String
  area        Area      @relation(fields: [areaId], references: [id])
  areaId      String
  estimatedDuration Int // in minutes
  equipmentNeeded Equipment[]
  schedules   Schedule[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([contractId])
  @@index([type])
  @@index([frequency])
  @@index([areaId])
}

enum ServiceType {
  LAWN_MOWING
  GARDENING
  TREE_TRIMMING
  LANDSCAPING
  SNOW_REMOVAL
}

enum ServiceFrequency {
  ONE_TIME
  WEEKLY
  BI_WEEKLY
  MONTHLY
  QUARTERLY
}

// Scheduling and Resources
model Schedule {
  id          String    @id @default(cuid())
  serviceId   String
  service     Service   @relation(fields: [serviceId], references: [id])
  date        DateTime
  status      ScheduleStatus
  notes       String?
  assignments Assignment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([serviceId])
  @@index([date])
  @@index([status])
}

enum ScheduleStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Assignment {
  id          String    @id @default(cuid())
  scheduleId  String
  schedule    Schedule  @relation(fields: [scheduleId], references: [id])
  workerId    String
  worker      User      @relation(fields: [workerId], references: [id])
  status      AssignmentStatus
  startTime   DateTime?
  endTime     DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum AssignmentStatus {
  ASSIGNED
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  REJECTED
}

// Location and Address Management
model Address {
  id            String    @id @default(cuid())
  street        String
  city          String
  state         String
  zipCode       String
  country       String    @default("USA")
  latitude      Float?
  longitude     Float?
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @unique
  areas         Area[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Area {
  id            String    @id @default(cuid())
  name          String
  description   String?
  size          Float     // in square feet
  type          AreaType
  address       Address   @relation(fields: [addressId], references: [id])
  addressId     String
  services      Service[]
  images        Image[]
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum AreaType {
  LAWN
  GARDEN
  DRIVEWAY
  TREES
  LANDSCAPE_BED
}

// Equipment and Resource Management
model Equipment {
  id            String    @id @default(cuid())
  name          String
  type          EquipmentType
  status        EquipmentStatus
  description   String?
  serialNumber  String?   @unique
  purchaseDate  DateTime?
  lastMaintenance DateTime?
  nextMaintenance DateTime?
  assignments   EquipmentAssignment[]
  services      Service[]  // Services that need this equipment
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum EquipmentType {
  MOWER
  TRIMMER
  BLOWER
  VEHICLE
  HAND_TOOL
  POWER_TOOL
}

enum EquipmentStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  REPAIR
  RETIRED
}

model EquipmentAssignment {
  id            String    @id @default(cuid())
  equipment     Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId   String
  worker        User      @relation(fields: [workerId], references: [id])
  workerId      String
  startTime     DateTime
  endTime       DateTime?
  status        EquipmentAssignmentStatus
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum EquipmentAssignmentStatus {
  ASSIGNED
  IN_USE
  RETURNED
  DAMAGED
}

// Financial Management
model Invoice {
  id            String    @id @default(cuid())
  contract      Contract  @relation(fields: [contractId], references: [id])
  contractId    String
  amount        Float
  status        InvoiceStatus
  dueDate       DateTime
  issuedDate    DateTime  @default(now())
  paidDate      DateTime?
  payments      Payment[]
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum InvoiceStatus {
  DRAFT
  ISSUED
  PAID
  OVERDUE
  CANCELLED
}

model Payment {
  id            String    @id @default(cuid())
  invoice       Invoice   @relation(fields: [invoiceId], references: [id])
  invoiceId     String
  amount        Float
  method        PaymentMethod
  status        PaymentStatus
  transactionId String?
  paidDate      DateTime  @default(now())
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CHECK
  CASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Image Management
model Image {
  id            String    @id @default(cuid())
  url           String
  type          ImageType
  area          Area      @relation(fields: [areaId], references: [id])
  areaId        String
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum ImageType {
  BEFORE
  AFTER
  ISSUE
  DOCUMENTATION
}
